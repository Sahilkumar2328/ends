import React, { useState } from "react";

export default function App() {
  const [jsonInput, setJsonInput] = useState("{\"data\": []}");
  const [response, setResponse] = useState(null);
  const [error, setError] = useState(null);
  const [selectedFilters, setSelectedFilters] = useState([]);

  const handleSubmit = async () => {
    try {
      const parsedInput = JSON.parse(jsonInput);
      if (!parsedInput.data || !Array.isArray(parsedInput.data)) {
        throw new Error("Invalid JSON format");
      }
      const res = await fetch("https://your-backend-url.com/bfhl", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(parsedInput)
      });
      const result = await res.json();
      setResponse(result);
      setError(null);
    } catch (err) {
      setError(err.message);
    }
  };

  const filteredResponse = response
    ? Object.keys(response)
        .filter(key => selectedFilters.includes(key))
        .reduce((obj, key) => ({ ...obj, [key]: response[key] }), {})
    : {};

  return (
    <div className="p-4">
      <h1 className="text-2xl font-bold">ABCD123</h1>
      <textarea
        className="border p-2 w-full"
        rows="4"
        value={jsonInput}
        onChange={(e) => setJsonInput(e.target.value)}
      />
      <button className="bg-blue-500 text-white p-2 mt-2" onClick={handleSubmit}>
        Submit
      </button>
      {error && <p className="text-red-500">{error}</p>}
      {response && (
        <div>
          <h2 className="text-xl mt-4">Response</h2>
          <select
            multiple
            className="border p-2"
            onChange={(e) =>
              setSelectedFilters([...e.target.selectedOptions].map(o => o.value))
            }
          >
            <option value="alphabets">Alphabets</option>
            <option value="numbers">Numbers</option>
            <option value="highest_alphabet">Highest Alphabet</option>
          </select>
          <pre className="bg-gray-200 p-2 mt-2">{JSON.stringify(filteredResponse, null, 2)}</pre>
        </div>
      )}
    </div>
  );
}
ho
now
